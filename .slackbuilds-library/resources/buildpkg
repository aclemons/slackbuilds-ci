#!/bin/bash

set -e

entrypoint="/bin/bash"
arg=""

# docker does not set `USER` normally, but typically this would be set in a
# normal environment when building slackbuilds manually, so we'll set it for
# consistency. We've seen at least one build, `astyle`, which fails without
# `USER` being set.
env_vars="-e USER=root -e LOGNAME=root"

if [ -z "$build_arch" ] ; then
  echo "arch?"
  exit 1
fi

if [ -z "$build_package" ] ; then
  echo "package?"
  exit 1
fi

if [ -z "$action" ] ; then
  echo "action?"
  exit 1
fi

if [ "$build_arch" = "i586" ] ; then
  arg="$entrypoint"
  entrypoint="linux32"
  platform="linux/386"
  shortarch=386
elif [ "$build_arch" = "x86_64" ] || [ "$build_arch" = "amd64" ] ; then
  build_arch=x86_64
  platform="linux/amd64"
  shortarch=amd64
elif [ "$build_arch" = "arm" ] ; then
  platform="linux/arm/v7"
  shortarch=arm
else
  echo "Unknown arch $build_arch"
  exit 1
fi

slackversion=15.0
repo=SBo
sbo=/var/lib/jenkins/caches/slackrepo/$slackversion/$repo
slackrepo=/var/lib/slackrepo/$repo
slackrepo_image=aclemons/slackrepo:slack-$slackversion

logs="$sbo/logs-$build_arch"

git="$(pwd)"

docker pull --quiet --platform "$platform" "$slackrepo_image"
docker tag "$slackrepo_image" "$slackrepo_image"-$shortarch
docker image rm "$slackrepo_image"

if [ "$build_package" != "all" ] ; then
  docker run --rm --platform "$platform" --entrypoint "$entrypoint" -v "$sbo":"$slackrepo" -v "$logs":/var/log/slackrepo -v "$git":"$slackrepo/slackbuilds" "$slackrepo_image"-$shortarch $arg -l -c "rm -rf $slackrepo/.lock && rm -rf $slackrepo/source/$build_package"
fi

if [ "$action" = "build" ] || [ "$action" = "rebuild" ]; then
  # allow mounting loopback devices, e.g.
  # https://github.com/SlackBuildsOrg/slackbuilds/blob/84cbf1cf8caa7e0b9a925644b87da701377185eb/misc/yubioath-desktop/yubioath-desktop.SlackBuild#L79
  loopback_devices="$(find /dev/ -name 'loop*' -print | sed 's/^/--device /g' | paste -d' ' -s)"
  {
    if [ "$build_package" = "all" ] ; then
      # shellcheck disable=SC2086
      docker run --rm --cap-add SYS_ADMIN $loopback_devices $env_vars --platform "$platform" --entrypoint "$entrypoint" -v "$sbo":"$slackrepo" -v "$logs":/var/log/slackrepo -v "$git":"$slackrepo/slackbuilds" "$slackrepo_image"-$shortarch $arg -l -c "git config --global --add safe.directory /var/lib/slackrepo/SBo/slackbuilds && slackrepo $action"
    else
      echo "# buildpkg $build_arch $build_package"
      echo '```'
      # shellcheck disable=SC2086
      docker run --rm --cap-add SYS_ADMIN $loopback_devices $env_vars --platform "$platform" --entrypoint "$entrypoint" -v "$sbo":"$slackrepo" -v "$logs":/var/log/slackrepo -v "$git":"$slackrepo/slackbuilds" "$slackrepo_image"-$shortarch $arg -l -c "git config --global --add safe.directory /var/lib/slackrepo/SBo/slackbuilds && slackrepo $action $build_package"
    fi
    echo '```'
  } 2>&1 | sed 's/slackrepo/repo/g' | sed '/mount: /d' | sed "/^:-)/s/^:-) \(.*\) (-:$/✅ \1 ✅/" | sed "/^:-(/s/^:-( \(.*\) )-:$/⛔️ \1 ⛔️/" | tee ../build_results

  if [ "$build_package" = "all" ] ; then
    sed -i -n '/^SUMMARY/,$p' ../build_results
    {
      echo "# buildpkg $build_arch $build_package"
      echo '```'
      echo "================================================================================"
      cat ../build_results
    } | tee ../build_results.new
    mv ../build_results.new ../build_results
  else
    # check if the base output is already too long
    if [ "$(< ../build_results wc -c)" -gt 65536 ] ; then
      sed -i -n '/^SUMMARY/,$p' ../build_results
      {
        echo "# buildpkg $build_arch $build_package"
        echo '```'
        echo "================================================================================"
        cat ../build_results
      } | tee ../build_results.new
      mv ../build_results.new ../build_results
    else
      cp ../build_results ../build_results.base
      keep=50000
      # shellcheck disable=SC2159
      while [ 0 ] ; do
        cp ../build_results.base ../build_results
        {
          echo ""
          if grep -q "⛔️ $build_package" ../build_results > /dev/null 2>&1 ; then
            echo "## Snipped Build Failure"
          else
            echo "## Snipped Build Log"
          fi
          echo ""
          echo "<details>"
          echo ""
          echo '```'
          docker run --rm --platform "$platform" --entrypoint "$entrypoint" -v "$sbo":"$slackrepo" -v "$logs":/var/log/slackrepo -v "$git":"$slackrepo/slackbuilds" "$slackrepo_image"-$shortarch $arg -l -c "cat /var/log/slackrepo/SBo/$build_package/build.log" | sed 's/slackrepo/repo/g' | tail -c"$keep" | iconv -c -t UTF-8
          echo '```'
          echo ""
          echo "</details>"
        } | tee -a ../build_results

        if [ "$(< ../build_results wc -c)" -gt 65536 ] ; then
          keep=$(( keep - 1000 ))

          if [ $keep -lt 0 ] ; then
            # this is going to also fail with payload too large
            break
          fi
        else
          rm ../build_results.base
          break
        fi
      done
    fi
  fi
fi

if [ "$build_package" != "all" ] ; then
  if [ "$action" = "lint" ] || grep -q "✅ $build_package" ../build_results > /dev/null 2>&1 ; then
    docker pull --quiet --platform "$platform" aclemons/sbo-maintainer-tools:latest-$slackversion
    docker tag aclemons/sbo-maintainer-tools:latest-$slackversion aclemons/sbo-maintainer-tools:latest-$slackversion-$shortarch
    docker image rm aclemons/sbo-maintainer-tools:latest-$slackversion

    if ls "$slackrepo/packages/$slackversion/$build_arch/$build_package/"*.dep > /dev/null 2>&1 ; then
      echo ""
    fi

    mkdir -p ../helper
    cat << EOF > ../helper/run_lint
#!/bin/bash

set -e
mkdir -p /tmp/SBo
depfiles=($slackrepo/packages/$slackversion/$build_arch/$build_package/*.dep)
[ "\${#depfiles[@]}" -ge 2 ] && exit 1
if [ -e "\${depfiles[0]}" ] ; then
  cat "\${depfiles[0]}" | while read -r dep ; do
    echo "Installing dependency: \$dep"
    dep_dir="\$(find $slackrepo/packages/$slackversion/$build_arch/ -name "\$dep" -type d)"
    TERSE=0 installpkg "\$dep_dir/*t?z"
    echo ""
  done
fi

sbopkglint $slackrepo/packages/$slackversion/$build_arch/$build_package/*t?z
EOF
    chmod 0755 ../helper/run_lint

    {
      echo "# sbopkglint $build_arch $build_package"
      echo '```'
      # shellcheck disable=SC2086
      docker run --rm $env_vars --platform "$platform" --entrypoint "$entrypoint" -v "$sbo":"$slackrepo" -v "$(dirname "$(pwd)")/helper/:/tmp/helper" aclemons/sbo-maintainer-tools:latest-$slackversion-$shortarch $arg -l -c "/tmp/helper/run_lint" || true
      rm -rf ../helper
      echo '```'
    } 2>&1 | sed 's/slackrepo/repo/g' | sed "/All tests passed/s/^\(.*\)$/✅ \1 ✅/" | sed "/\!\!\!/s/^\(.*\)$/⛔️ \1 ⛔️/" | tee ../lint_results
  fi
fi
